#include <iostream>
#include <unistd.h>
#include <string.h>
#include <netinet/in.h>
#include <thread>

#define PORT 8080

void receiveMessages(int socket) {
    char buffer[1024];
    while (true) {
        memset(buffer, 0, sizeof(buffer));
        int valread = read(socket, buffer, 1024);
        if (valread <= 0) break;
        std::cout << "\nClient: " << buffer << "\nYou: ";
        std::cout.flush();
    }
}

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    socklen_t addrlen = sizeof(address);

    server_fd = socket(AF_INET, SOCK_STREAM, 0);

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    bind(server_fd, (struct sockaddr*)&address, sizeof(address));
    listen(server_fd, 1);
    std::cout << "Waiting for client to connect...\n";

    new_socket = accept(server_fd, (struct sockaddr*)&address, &addrlen);
    std::cout << "Client connected!\n";

    std::thread receiver(receiveMessages, new_socket);

    std::string msg;
    while (true) {
        std::cout << "You: ";
        std::getline(std::cin, msg);
        send(new_socket, msg.c_str(), msg.size(), 0);
    }

    receiver.join();
    close(new_socket);
    close(server_fd);
    return 0;
}

Client cpp
#include <iostream>
#include <unistd.h>
#include <string.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <thread>

#define PORT 8080

void receiveMessages(int socket) {
    char buffer[1024];
    while (true) {
        memset(buffer, 0, sizeof(buffer));
        int valread = read(socket, buffer, 1024);
        if (valread <= 0) break;
        std::cout << "\nServer: " << buffer << "\nYou: ";
        std::cout.flush();
    }
}

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;

    sock = socket(AF_INET, SOCK_STREAM, 0);
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);
    inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr); // Localhost

    connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr));
    std::cout << "Connected to server!\n";

    std::thread receiver(receiveMessages, sock);

    std::string msg;
    while (true) {
        std::cout << "You: ";
        std::getline(std::cin, msg);
        send(sock, msg.c_str(), msg.size(), 0);
    }

    receiver.join();
    close(sock);
    return 0;
}




